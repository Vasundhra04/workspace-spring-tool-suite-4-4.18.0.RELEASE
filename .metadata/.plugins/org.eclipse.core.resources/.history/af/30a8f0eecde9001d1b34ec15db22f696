package com.example.demo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.example.demo.dao.InstaRepository;
import com.example.demo.model.Insta;


import jakarta.transaction.Transactional;




@Service
public class InstaService {
	
	@Autowired
	InstaRepository tutRepo;
	
	public List<Insta>getAllTutors()
	{
		List<Insta>tutList=(List<Insta>) tutRepo.findAll();
		return tutList;
	}
	public Insta saveTutors(Insta u)
	{
		return tutRepo.save(u);
	}
	public Insta updateTutors(Insta u,int phno)
	{
		Optional<Insta> optional=tutRepo.findById(phno);
		Insta obj=null;
		if(optional.isPresent())
		{
			obj=optional.get();
			obj.setPhno(u.getPhno());
			obj.setEmailid(u.getEmailid());
			obj.setPassword(u.getPassword());
			obj.setUsername(u.getUsername());
			tutRepo.saveAndFlush(u);
		}
		return obj;
		
	}
	public void deleteTutors(int phno)
	{
		tutRepo.deleteById(phno);
}
	public Insta getTutors(int phno)
	{
		return tutRepo.findById(phno).get();
	}
	public  List<Insta>sortTutors(String field)
	{
		return tutRepo.findAll(Sort.by(Direction.DESC,field));
	}
	
	public List<Insta>pagingTutors(int offset,int  pageSize)
	{
		Page<Insta>   obj= tutRepo.findAll(PageRequest.of(offset, pageSize));
		return obj.getContent();
	}
	public List<Insta> paginate(int offset, int pageSize, String username) 
	{
		Page<Insta> obj=tutRepo.findAll(PageRequest.of(offset, pageSize,Sort.by(username).descending()));
		return obj.getContent();
	}
	public  List<Insta> fetchByUsernamePrefix(String prefix)
	{
		return tutRepo.findByUsernameStartingWith(prefix);
	}
	public  List<Insta> fetchByUsernameSuffix(String suffix)
	{
		return tutRepo.findByUsernameEndingWith(suffix);
	}
	public  List<Insta> findByBft(String bft)
	{
		return tutRepo.findByBft(bft);
	}
	
	public List<Insta> getInstaByEmailid(String emailid,String username)
	  {
		  return tutRepo.getInstaByEmailid(emailid, username);
	  }
	public List<Insta> getInstaByUsername(String username) {
		return tutRepo.getInstaByUsername(username);
	}
	
	@Transactional
	public int deleteInstaByUsername(String name)
	{
		return tutRepo.deleteInstaByUserName(name);
	}
	@Transactional
	public List<Insta> updateInstaByUsername(int phno,String username)
	{
		return tutRepo.updateInstaByUsername(phno, username);
	}
	

	
}